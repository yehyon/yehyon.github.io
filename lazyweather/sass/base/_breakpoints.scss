
// $font-sizes: ( p, bq, sh, h );
@function pow($x, $y) {
  $ret: 1;

  @if $y > 0 {
    @for $i from 1 through $y {
        $ret: $ret * $x;
    }
  } 

  @else {
    @for $i from $y to 0 {
        $ret: $ret / $x;
    }
  }

  @return $ret;
}


$bp-sizes: (
  xs: (
    base-font-size: 16 * ( 320 / 414 ) * 1px,
    scale: 1.5
  ),
  s: (
    base-font-size: 16 * ( 375 / 414 ) * 1px,
    scale: 1.5
  ),
  m: (
    base-font-size: 16px, 
    scale: 1.5
  )
);

$breakpoints: (
  xs: 320px,
  s: 375px,
  m: 414px
);

$font-sizes: ( h4, h3, h2, h1);

@mixin generate-font-properties($label, $base-font-size, $scale) {
  $scale-value: index($font-sizes, $label) - 1;

  $fs: $base-font-size * pow($scale, $scale-value);

  font-size: $fs;
}

@mixin breakpoint($name) {
  @if not map-has-key($breakpoints, $name) {
    @warn "Invalid breakpoint `#{$name}`.";
  } @else {
      @if map-get($breakpoints, $name) == '' {
        @content;
      } @else {
        @media (min-width: map-get($breakpoints, $name)) {
        @content;
      }
    }
  }
}


@function get-breakpoint-property($prop, $bp) {
  @return map-get(map-get($bp-sizes, $bp), $prop);
}


@each $size, $data in $bp-sizes {

  $bsf: get-breakpoint-property(base-font-size, $size);
  $s: get-breakpoint-property(scale, $size);

  @include breakpoint($size) {
    @each $label in $font-sizes {
      #{$label} {
        @include generate-font-properties($label, $bsf, $s);
      } 
    }
  }
}